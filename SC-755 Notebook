%md
<p style = "font-weight: bold;  font-size:45px">R1 SC-755</p>

Creation of Xlat and R1 Data Frames


val r1Table = sc.textFile("hdfs://omdxp125f5.uprr.com:8020/apps/hive/warehouse/prftm.db/r1_table_2/*") //dev data. For test use: 
val r1Table2 = sc.textFile("hdfs://omdxp125f5.uprr.com:8020/apps/hive/warehouse/prftm.db/ftm_ops_eqmt_stat_r1/*") 
val xlatTable = sc.textFile("hdfs://omdxp125f5.uprr.com:8020/apps/hive/warehouse/prftm.db/ftm_code_xlat/*")
val r1SchemaString = "sc931_ln_nbr sc755_prim_ln_nbr sc755_prim_item_id sc755_dtl_ln_nbr sc755_dtl_item_id st_abrv stat_amt r1_train_type rpt_yr rpt_mo rpt_dt"
val r1SchemaString2 = "ftm_ops_eqmt_stat_r1_id sc931_ln_nbr sc755_prim_ln_nbr sc755_prim_item_id sc755_dtl_ln_nbr sc755_dtl_item_id r1_trn_type st_abrv stat_amt crtn_user_id crtn_tmst last_uptd_tmst last_uptd_user_id rpt_yr rpt_mo rpt_dt"
val xlatSchemaString = "code_type code_seq code_1 code_2 code_3 code_valu code_valu_2 code_valu_3 code_desc last_uptd_dt last_uptd_by_id"
import org.apache.spark.sql.types.StructType
import org.apache.spark.sql.types.StructField
import org.apache.spark.sql.types.StringType
import org.apache.spark.sql._
val r1Schema = StructType(r1SchemaString.split(" ").map(fieldName ⇒ StructField(fieldName, StringType, true)))
val r1Schema2 = StructType(r1SchemaString2.split(" ").map(fieldName ⇒ StructField(fieldName, StringType, true)))
val r1RowRDD = r1Table.map(_.split("\\|")).map(e ⇒ Row(e(0),e(1),e(2),e(3),e(4),e(5),e(6),e(7),e(8),e(9),e(10)))
val r1RowRDD2 = r1Table2.map(_.split("\\|")).map(e ⇒ Row(e(0),e(1),e(2),e(3),e(4),e(5),e(6),e(7),e(8),e(9),e(10),e(11), e(12), e(13), e(14),e(15)))
val xlatSchema = StructType(xlatSchemaString.split(" ").map(fieldName ⇒ StructField(fieldName, StringType, true)))
val xlatRowRDD = xlatTable.map(_.split("\\|")).filter(s=>s(0)=="TRNOPER").map(e ⇒ Row(e(0),e(1),e(2),e(3),e(4),e(5),e(6),e(7),e(8),e(9),e(10)))
//create data frame
val r1TableDF = sqlContext.createDataFrame(r1RowRDD, r1Schema)
r1TableDF.cache()
r1TableDF.registerTempTable("r1_table")
val r1TableDF2 = sqlContext.createDataFrame(r1RowRDD2, r1Schema2)
r1TableDF2.cache()
r1TableDF2.registerTempTable("r1_table2")
val xlatTableDF = sqlContext.createDataFrame(xlatRowRDD, xlatSchema)
xlatTableDF.cache()
xlatTableDF.registerTempTable("xlat_table")

Creation of Xlat and R1 Data Frames


val r1Table = sc.textFile("hdfs://omdxp125f5.uprr.com:8020/apps/hive/warehouse/prftm.db/r1_table_2/*") //dev data. For test use: 
val r1Table2 = sc.textFile("hdfs://omdxp125f5.uprr.com:8020/apps/hive/warehouse/prftm.db/ftm_ops_eqmt_stat_r1/*") 
val xlatTable = sc.textFile("hdfs://omdxp125f5.uprr.com:8020/apps/hive/warehouse/prftm.db/ftm_code_xlat/*")
val r1SchemaString = "sc931_ln_nbr sc755_prim_ln_nbr sc755_prim_item_id sc755_dtl_ln_nbr sc755_dtl_item_id st_abrv stat_amt r1_train_type rpt_yr rpt_mo rpt_dt"
val r1SchemaString2 = "ftm_ops_eqmt_stat_r1_id sc931_ln_nbr sc755_prim_ln_nbr sc755_prim_item_id sc755_dtl_ln_nbr sc755_dtl_item_id r1_trn_type st_abrv stat_amt crtn_user_id crtn_tmst last_uptd_tmst last_uptd_user_id rpt_yr rpt_mo rpt_dt"
val xlatSchemaString = "code_type code_seq code_1 code_2 code_3 code_valu code_valu_2 code_valu_3 code_desc last_uptd_dt last_uptd_by_id"
import org.apache.spark.sql.types.StructType
import org.apache.spark.sql.types.StructField
import org.apache.spark.sql.types.StringType
import org.apache.spark.sql._
val r1Schema = StructType(r1SchemaString.split(" ").map(fieldName ⇒ StructField(fieldName, StringType, true)))
val r1Schema2 = StructType(r1SchemaString2.split(" ").map(fieldName ⇒ StructField(fieldName, StringType, true)))
val r1RowRDD = r1Table.map(_.split("\\|")).map(e ⇒ Row(e(0),e(1),e(2),e(3),e(4),e(5),e(6),e(7),e(8),e(9),e(10)))
val r1RowRDD2 = r1Table2.map(_.split("\\|")).map(e ⇒ Row(e(0),e(1),e(2),e(3),e(4),e(5),e(6),e(7),e(8),e(9),e(10),e(11), e(12), e(13), e(14),e(15)))
val xlatSchema = StructType(xlatSchemaString.split(" ").map(fieldName ⇒ StructField(fieldName, StringType, true)))
val xlatRowRDD = xlatTable.map(_.split("\\|")).filter(s=>s(0)=="TRNOPER").map(e ⇒ Row(e(0),e(1),e(2),e(3),e(4),e(5),e(6),e(7),e(8),e(9),e(10)))
//create data frame
val r1TableDF = sqlContext.createDataFrame(r1RowRDD, r1Schema)
r1TableDF.cache()
r1TableDF.registerTempTable("r1_table")
val r1TableDF2 = sqlContext.createDataFrame(r1RowRDD2, r1Schema2)
r1TableDF2.cache()
r1TableDF2.registerTempTable("r1_table2")
val xlatTableDF = sqlContext.createDataFrame(xlatRowRDD, xlatSchema)
xlatTableDF.cache()
xlatTableDF.registerTempTable("xlat_table")

Creation of part 1 2015 dataframes


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
val queryPart1:String = "with r1 as (SELECT DISTINCT cast(ln_nbr as int),  description, item_id, cast(code_seq as int) as code_seq, SUM(amt) as amt FROM (SELECT DISTINCT 
sc755_dtl_ln_nbr        AS ln_nbr,   sc755_dtl_item_id    AS item_id,  CASE WHEN sc755_dtl_item_id IN ('2-01', '2-02', '2-03', '2-04', '2-05', '2-07', '3-01', '3-02', '3-03', 
'3-04', '3-11', '3-21', '3-31', '9-01','9-02', '10-0', '11-01')   THEN SUM(stat_amt) ELSE Round(SUM(stat_amt) / 1000, 0) END AS amt,  st_abrv, x.code_valu_3 AS description, x
.code_seq  FROM xlat_table x, r1_table2 t  WHERE cast(t.sc755_dtl_ln_nbr as int)=x.code_valu and x.code_1='R1LNNBR' AND  sc755_dtl_ln_nbr is not null and sc755_dtl_ln_nbr !
='\\N'  and sc755_dtl_item_id=x.code_valu_2 "
val queryPart2 = " GROUP BY sc755_dtl_item_id, sc755_dtl_ln_nbr, st_abrv, x.code_valu_3,code_seq ) query Group by ln_nbr, item_id, description,code_seq order by ln_nbr ) select 
ln_nbr, description, CONCAT (item_id, ' ', description) as line_desc, amt from ( select ln_nbr, x.code_valu_3 as description, x.code_valu_2 as item_id, x.code_seq as code_seq, 
ROUND(sum(sub_total),0) as amt from ( select case when  r1.ln_nbr in (2,3,4) then 5 when r1.ln_nbr in (8,9,10) then 11 when r1.ln_nbr between 15 and 29 then 30 when r1.ln_nbr 
between 31 and 45 then 46 when r1.ln_nbr between 47 and 63 then 64 when r1.ln_nbr between 65 and 81 then 82 when r1.ln_nbr between 85 and 87 then 88 when r1.ln_nbr between 98 
and 103 then 104 when r1.ln_nbr between 105 and 106 then 107 when r1.ln_nbr between 108 and 109 then 110 when r1.ln_nbr between 111 and 112 then 113 when r1.ln_nbr between 126 
and 128 then 129 when r1.ln_nbr between 130 and 132 then 133 else '9999' end as ln_nbr, amt as sub_total from r1 ) t , xlat_table x WHERE x.code_1='R1LNNBR' and  ln_nbr!='9999' 
and ln_nbr=x.code_valu group by t.ln_nbr,x.code_valu_3, x.code_valu_2, x.code_seq UNION select ln_nbr, x.code_valu_3 as description, x.code_valu_2 as item_id, x.code_seq, sum
(sub_total) as amt from ( select case when r1.ln_nbr in (2,3,4,6) then 7 when r1.ln_nbr in (8,9,10,12,13) then  14 when r1.ln_nbr in (108,109,111,112) then 114 else '9999' end 
as ln_nbr, amt as sub_total from r1 ) t , xlat_table x WHERE x.code_1='R1LNNBR' and  ln_nbr!='9999' and ln_nbr=x.code_valu group by t.ln_nbr,x.code_valu_3, x.code_valu_2, x
.code_seq UNION select cast(code_valu as int) as ln_nbr, code_valu_3 as description, case when code_valu_2='null' then '' else code_valu_2 end as item_id, code_seq, 0 as amt 
from xlat_table where code_1='R1LNNBR' and (code_valu_3 like '%TOTAL%' or code_valu_2 like '%.' or code_valu_2 is null or code_valu_2='null') and code_valu not in ('5','11'
,'30','46','64','82','88','104','107','110','113','129','133','7','14','114') UNION select * from r1 ) main_tbl order by cast(ln_nbr as int), code_seq "
val entireQueryJan = queryPart1 + "and rpt_mo = 1 AND rpt_yr = 2015 "+ queryPart2
val entireQueryFeb = queryPart1 + "and rpt_mo = 2 AND rpt_yr = 2015 "+ queryPart2
val entireQueryMar = queryPart1 + "and rpt_mo = 3 AND rpt_yr = 2015 "+ queryPart2
val entireQueryApr = queryPart1 + "and rpt_mo = 4 AND rpt_yr = 2015 "+ queryPart2
val entireQueryMay = queryPart1 + "and rpt_mo = 5 AND rpt_yr = 2015 "+ queryPart2
val entireQueryJun = queryPart1 + "and rpt_mo = 6 AND rpt_yr = 2015 "+ queryPart2
val sc755DFJan2015 = sqlContext.sql(entireQueryJan)
sc755DFJan2015.cache()
sc755DFJan2015.registerTempTable("sc755_2015_Jan_table")
val sc755DFFeb2015 = sqlContext.sql(entireQueryFeb)
sc755DFFeb2015.cache()
sc755DFFeb2015.registerTempTable("sc755_2015_Feb_table")
val sc755DFMar2015 = sqlContext.sql(entireQueryMar)
sc755DFMar2015.cache()
sc755DFMar2015.registerTempTable("sc755_2015_Mar_table")


Creation of the October 2016 SC755 Data Frame


val sc755DF = sqlContext.sql(s"with r1 as (SELECT DISTINCT"+
"  cast(ln_nbr as int), "+
"   description,"+
"  item_id, cast(code_seq as int) as code_seq, "+
"  SUM(amt) as amt "+
"FROM (SELECT DISTINCT "+
"        sc755_dtl_ln_nbr                        AS ln_nbr, "+
"        sc755_dtl_item_id                       AS item_id, "+
"        CASE WHEN sc755_dtl_item_id IN ('2-01', '2-02', '2-03', '2-04', '2-05', '2-07', '3-01', '3-02', '3-03', '3-04', '3-11', '3-21', '3-31', '9-01','9-02', '10-0', '11-01') "+
"          THEN SUM(stat_amt) "+
"        ELSE Round(SUM(stat_amt) / 1000, 0) END AS amt, "+
"        st_abrv, "+
"        x.code_valu_3 AS description, x.code_seq "+
"      FROM xlat_table x, r1_table t "+
"      WHERE cast(t.sc755_dtl_ln_nbr as int)=x.code_valu and x.code_1='R1LNNBR' AND  sc755_dtl_ln_nbr is not null and sc755_dtl_ln_nbr !='\\N'  and sc755_dtl_item_id=x.code_valu_2 "+
"        and rpt_mo = 10 "+
"            AND rpt_yr = 2016 "+
"         GROUP BY sc755_dtl_item_id, sc755_dtl_ln_nbr, st_abrv, x.code_valu_3,code_seq ) "+
" query "+
"Group by ln_nbr, item_id, description,code_seq order by ln_nbr ) "+
"select ln_nbr, description, CONCAT (item_id, ' ', description) as line_desc, amt from ( "+
"select ln_nbr, x.code_valu_3 as description, x.code_valu_2 as item_id, x.code_seq as code_seq, ROUND(sum(sub_total),0) as amt from ( "+
"select case when  r1.ln_nbr in (2,3,4) then 5 "+
"when r1.ln_nbr in (8,9,10) then 11 "+
"when r1.ln_nbr between 15 and 29 then 30 "+
"when r1.ln_nbr between 31 and 45 then 46 "+
"when r1.ln_nbr between 47 and 63 then 64 "+
"when r1.ln_nbr between 65 and 81 then 82 "+
"when r1.ln_nbr between 85 and 87 then 88 "+
"when r1.ln_nbr between 98 and 103 then 104 "+
"when r1.ln_nbr between 105 and 106 then 107 "+
"when r1.ln_nbr between 108 and 109 then 110 "+
"when r1.ln_nbr between 111 and 112 then 113 "+
"when r1.ln_nbr between 126 and 128 then 129 "+
"when r1.ln_nbr between 130 and 132 then 133 else '9999' end"+
" as ln_nbr, "+
"amt as sub_total "+
"from r1 ) t , xlat_table x "+
"WHERE x.code_1='R1LNNBR' and  ln_nbr!='9999' and ln_nbr=x.code_valu "+
"group by t.ln_nbr,x.code_valu_3, x.code_valu_2, x.code_seq "+
"UNION "+
"select ln_nbr, x.code_valu_3 as description, x.code_valu_2 as item_id, x.code_seq, sum(sub_total) as amt from ( "+
"select case when r1.ln_nbr in (2,3,4,6) then 7 "+
"when r1.ln_nbr in (8,9,10,12,13) then  14 "+
"when r1.ln_nbr in (108,109,111,112) then 114 "+
"else '9999' "+
"end as ln_nbr, "+
"amt as sub_total "+
"from r1 ) t , xlat_table x "+
"WHERE x.code_1='R1LNNBR' and  ln_nbr!='9999' and ln_nbr=x.code_valu "+
"group by t.ln_nbr,x.code_valu_3, x.code_valu_2, x.code_seq "+
"UNION "+
"select cast(code_valu as int) as ln_nbr, code_valu_3 as description, case when code_valu_2='null' then '' else code_valu_2 end as item_id, code_seq, 0 as amt "+
"from xlat_table where code_1='R1LNNBR' and (code_valu_3 like '%TOTAL%' or code_valu_2 like '%.' or code_valu_2 is null or code_valu_2='null') and code_valu not in ('5','11','30','46','64','82','88','104','107','110','113','129','133','7','14','114') "+
"UNION "+
"select * from r1 ) main_tbl order by cast(ln_nbr as int), code_seq ")
sc755DF.cache()
sc755DF.registerTempTable("sc755_2016_table") 


Creation of January 2015 SC755 Data Frame


val sc755DF2015 = sqlContext.sql(s"with r1 as (SELECT DISTINCT"+
"  cast(ln_nbr as int), "+
"   description,"+
"  item_id, cast(code_seq as int) as code_seq, "+
"  SUM(amt) as amt "+
"FROM (SELECT DISTINCT "+
"        sc755_dtl_ln_nbr                        AS ln_nbr, "+
"        sc755_dtl_item_id                       AS item_id, "+
"        CASE WHEN sc755_dtl_item_id IN ('2-01', '2-02', '2-03', '2-04', '2-05', '2-07', '3-01', '3-02', '3-03', '3-04', '3-11', '3-21', '3-31', '9-01','9-02', '10-0', '11-01') "+
"          THEN SUM(stat_amt) "+
"        ELSE Round(SUM(stat_amt) / 1000, 0) END AS amt, "+
"        st_abrv, "+
"        x.code_valu_3 AS description, x.code_seq "+
"      FROM xlat_table x, r1_table2 t "+
"      WHERE cast(t.sc755_dtl_ln_nbr as int)=x.code_valu and x.code_1='R1LNNBR' AND  sc755_dtl_ln_nbr is not null and sc755_dtl_ln_nbr !='\\N'  and sc755_dtl_item_id=x.code_valu_2 "+
"        and rpt_mo = 1 "+
"            AND rpt_yr = 2015 "+
"         GROUP BY sc755_dtl_item_id, sc755_dtl_ln_nbr, st_abrv, x.code_valu_3,code_seq ) "+
" query "+
"Group by ln_nbr, item_id, description,code_seq order by ln_nbr ) "+
"select ln_nbr, description, CONCAT (item_id, ' ', description) as line_desc, amt from ( "+
"select ln_nbr, x.code_valu_3 as description, x.code_valu_2 as item_id, x.code_seq as code_seq, ROUND(sum(sub_total),0) as amt from ( "+
"select case when  r1.ln_nbr in (2,3,4) then 5 "+
"when r1.ln_nbr in (8,9,10) then 11 "+
"when r1.ln_nbr between 15 and 29 then 30 "+
"when r1.ln_nbr between 31 and 45 then 46 "+
"when r1.ln_nbr between 47 and 63 then 64 "+
"when r1.ln_nbr between 65 and 81 then 82 "+
"when r1.ln_nbr between 85 and 87 then 88 "+
"when r1.ln_nbr between 98 and 103 then 104 "+
"when r1.ln_nbr between 105 and 106 then 107 "+
"when r1.ln_nbr between 108 and 109 then 110 "+
"when r1.ln_nbr between 111 and 112 then 113 "+
"when r1.ln_nbr between 126 and 128 then 129 "+
"when r1.ln_nbr between 130 and 132 then 133 else '9999' end"+
" as ln_nbr, "+
"amt as sub_total "+
"from r1 ) t , xlat_table x "+
"WHERE x.code_1='R1LNNBR' and  ln_nbr!='9999' and ln_nbr=x.code_valu "+
"group by t.ln_nbr,x.code_valu_3, x.code_valu_2, x.code_seq "+
"UNION "+
"select ln_nbr, x.code_valu_3 as description, x.code_valu_2 as item_id, x.code_seq, sum(sub_total) as amt from ( "+
"select case when r1.ln_nbr in (2,3,4,6) then 7 "+
"when r1.ln_nbr in (8,9,10,12,13) then  14 "+
"when r1.ln_nbr in (108,109,111,112) then 114 "+
"else '9999' "+
"end as ln_nbr, "+
"amt as sub_total "+
"from r1 ) t , xlat_table x "+
"WHERE x.code_1='R1LNNBR' and  ln_nbr!='9999' and ln_nbr=x.code_valu "+
"group by t.ln_nbr,x.code_valu_3, x.code_valu_2, x.code_seq "+
"UNION "+
"select cast(code_valu as int) as ln_nbr, code_valu_3 as description, case when code_valu_2='null' then '' else code_valu_2 end as item_id, code_seq, 0 as amt "+
"from xlat_table where code_1='R1LNNBR' and (code_valu_3 like '%TOTAL%' or code_valu_2 like '%.' or code_valu_2 is null or code_valu_2='null') and code_valu not in ('5','11','30','46','64','82','88','104','107','110','113','129','133','7','14','114') "+
"UNION "+
"select * from r1 ) main_tbl order by cast(ln_nbr as int), code_seq ")
sc755DF2015.cache()
sc755DF2015.registerTempTable("sc755_2015_table")


SC - 755 Report October 2016


%sql select ln_nbr, line_desc, amt from sc755_2016_table


%md
<p style = "font-weight: bold; text-decoration: underline; font-size:35px">Freight Car Miles</p>


Miles comparison by Car Groups


1
2
3
4
5
6
7
8
9
10
%sql
with s as ( select * from sc755_2016_table where ln_nbr in (30, 46, 64, 82))
select
case
when ln_nbr = 30 then 'RR Owned and leased - Loaded'
when ln_nbr = 46 then 'RR Owned and leased - Empty' 
when ln_nbr = 64 then 'Private Line Cars - Loaded'
when ln_nbr = 82 then 'Private Line Cars - Empty'
else  ''
end as description, amt from s


%angular
//http://stackoverflow.com/questions/39835503/heatmap-on-zeppelin-using-leaflet
//https://gist.github.com/granturing/a09aed4a302a7367be92
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css" />
<div id="map" style="height: 400px; width: 100%"></div>

<script type="text/javascript">
function initMap() {
    var map = L.map('map').setView([30.00, -30.00], 3);

    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors',
        maxZoom: 12,
        minZoom: 3
    }).addTo(map);

    var geoMarkers = L.layerGroup().addTo(map);
    
    var el = angular.element($('#map').parent('.ng-scope'));
    angular.element(el).ready(function() {
        window.locationWatcher = el.scope().compiledScope.$watch('locations', function(newValue, oldValue) {
            // geoMarkers.clearLayers(); -- if you want to only show new data clear the layer first
            angular.forEach(newValue, function(tweet) {
                var marker = L.marker([ tweet.loc.lat, tweet.loc.lon ])
                  .bindPopup(tweet.user + ": " + tweet.tweet)
                  .addTo(geoMarkers);
            });
        })
    });
}

if (window.locationWatcher) {
    // clear existing watcher otherwise we'll have duplicates
    window.locationWatcher();
}

// ensure we only load the script once, seems to cause issues otherwise
if (window.L) {
    initMap();
} else {
    console.log('Loading Leaflet library');
    var sc = document.createElement('script');
    sc.type = 'text/javascript';
    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';
    sc.onload = initMap;
    sc.onerror = function(err) { alert(err); }
    document.getElementsByTagName('head')[0].appendChild(sc);
}
</script>
